import pandas as pd
from genecode_data import *



reference_frequnecy_cai = {
    'Homo_sapiens_EMBOSS': [510981, 912370, 242826, 595935, 403140, 327792, 820851, 702386, 922616, 1291190,
                            655524, 544814,
                            524128, 727678, 531888, 345134, 483801, 340239, 229688, 677714, 502403, 764918,
                            1035170, 224870,
                            632996, 1295575, 413535, 234253, 406803, 710465, 615538, 532711, 538723, 645805,
                            226405, 558133,
                            382585, 1109029, 373118, 375881, 200253, 345088, 376554, 148414, 626669, 384496,
                            383463, 567853,
                            143585, 477158, 476341, 615448, 197169, 414756, 223912, 470297, 919492, 349016,
                            417781, 495846,
                            385678, 20594, 17361, 36263],'lalala':'lalala'}
reference_order_cai = {
    'Homo_sapiens_EMBOSS': ['GCA', 'GCC', 'GCG', 'GCT', 'TGC', 'TGT', 'GAC', 'GAT', 'GAA', 'GAG', 'TTC', 'TTT',
                            'GGA', 'GGC',
                            'GGG', 'GGT', 'CAC', 'CAT', 'ATA', 'ATC', 'ATT', 'AAA', 'AAG', 'CTA', 'CTC', 'CTG',
                            'CTT', 'TTA',
                            'TTG', 'ATG', 'AAC', 'AAT', 'CCA', 'CCC', 'CCG', 'CCT', 'CAA', 'CAG', 'AGA', 'AGG',
                            'CGA', 'CGC',
                            'CGG', 'CGT', 'AGC', 'AGT', 'TCA', 'TCC', 'TCG', 'TCT', 'ACA', 'ACC', 'ACG', 'ACT',
                            'GTA', 'GTC',
                            'GTG', 'GTT', 'TGG', 'TAC', 'TAT', 'TAA', 'TAG', 'TGA']}
tGCN_tai = {'Homo_sapiens_GRCh38_GtRNAdb':[12, 8, 0, 6, 6, 9, 1, 6, 5, 5, 3, 4, 6, 8, 4, 7, 15, 8, 0, 13, 5, 5, 7, 4, 20, 13, 7, 9, 5, 4, 4, 4, 0, 0, 1,
         0, 0, 0, 0, 7, 15, 10, 0, 9, 9, 26, 9, 9, 25, 13, 13, 9, 8, 14, 29, 0, 3, 0, 10, 0, 0, 0, 0, 0]}
reference_heg_ite = {'Homo_sapiens_EMBOSS':[544814.0, 655524.0, 234253.0, 406803.0, 477158.0, 567853.0, 383463.0, 143585.0, 385678.0, 495846.0,
           327792.0, 403140.0, 413535.0, 632996.0, 224870.0, 1295575.0, 558133.0, 645805.0, 538723.0, 226405.0,
           340239.0, 483801.0, 382585.0, 1109029.0, 148414.0, 345088.0, 200253.0, 376554.0, 502403.0, 677714.0,
           414756.0, 615448.0, 476341.0, 197169.0, 532711.0, 615538.0, 764918.0, 1035170.0, 384496.0, 626669.0,
           373118.0, 375881.0, 349016.0, 470297.0, 223912.0, 919492.0, 595935.0, 912370.0, 510981.0, 242826.0,
           702386.0, 820851.0, 922616.0, 1291190.0, 345134.0, 727678.0, 524128.0, 531888.0, 17361.0, 20594.0,
           36263.0]}
reference_bg_ite = {'Homo_sapiens_EMBOSS':[687589.0, 512749.0, 345215.0, 295841.0, 459081.0, 342347.0, 414992.0, 355639.0, 504963.0, 376561.0,
          418699.0, 312233.0, 749622.0, 559009.0, 677630.0, 580714.0, 575017.0, 428803.0, 519794.0, 445452.0,
          472034.0, 352006.0, 803248.0, 688366.0, 312558.0, 233081.0, 282540.0, 242131.0, 532065.0, 396773.0,
          497528.0, 371017.0, 449746.0, 385423.0, 657750.0, 490499.0, 969364.0, 830724.0, 579225.0, 431940.0,
          403343.0, 345656.0, 573163.0, 427420.0, 518118.0, 444016.0, 660594.0, 492619.0, 597152.0, 511746.0,
          872554.0, 650683.0, 1192155.0, 1021651.0, 621672.0, 463594.0, 561968.0, 481594.0, 23436.0, 27347.0,
          23436.0]}
optimized_codon_fop={'correlation_analysis':True}
optimized_codon_cbi={'correlation_analysis':True}



class select_parameters():
    cai_reference_frequency=reference_frequnecy_cai['Homo_sapiens_EMBOSS']
    cai_reference_order=reference_order_cai['Homo_sapiens_EMBOSS']
    fop_opt_codon=optimized_codon_fop['correlation_analysis']
    tai_tGCN=tGCN_tai['Homo_sapiens_GRCh38_GtRNAdb']
    ite_heg=reference_heg_ite['Homo_sapiens_EMBOSS']
    ite_bg=reference_bg_ite['Homo_sapiens_EMBOSS']
    cbi_opt_codon=optimized_codon_cbi['correlation_analysis']



    @staticmethod
    def parameter_select_cai():
        #select reference set for cai computing
        cai_dict={1:'Homo_sapiens_EMBOSS'}
        while True:
            try:
                cai_choice = int(input("select reference set for cai computing"
                                       "\nYour choice is: "
                                       "\n(1) 'Homo_sapiens_reference_set_fromEMBOSS[DEFAULT]'\n"))
            except ValueError:
                print("Only one reference set could be chosen at a time.")
                continue
            if cai_choice not in cai_dict.keys():
                raise ValueError('the number you choose is out of range')

            select_parameters.cai_reference_frequency=reference_frequnecy_cai[cai_dict[cai_choice]]
            select_parameters.cai_reference_order = reference_order_cai[cai_dict[cai_choice]]
            break
        print(f"reference set for cai computing was selected\n")
        pass
        # result +=(cai_reference_frequency,)
        # result +=(cai_reference_order,)

    @staticmethod
    def parameter_select_fop():
        #select optimized codons for fop computing
        fop_dict={0:'correlation_analysis'}
        while True:
            try:
                fop_choice = int(input("select optimized codons for fop computing"
                                       "\nYour choice is: "
                                       "\n(0) Correlation_analysis_for_optimized_codon[DEFAULT]"
                                       "\n"))
            except ValueError:
                print("Only one reference could be chosen at a time.")
                continue
            select_parameters.fop_opt_codon=fop_dict[fop_choice]
            break
        print(f"optimized codon for fop computing was selected\n")

    @staticmethod
    def parameter_select_tai():
        # select reference GCN of tRNAs for tai computing
        tai_dict={1:'Homo_sapiens_GRCh38_GtRNAdb'}
        while True:
            try:
                tai_choice = int(input("select reference GCN of tRNAs for tai computing"
                                       "\nYour choice is: "
                                       "\n(1) Homo_sapiens_GRCh38_fromGtRNAdb[DEFAULT]"
                                       "\n"))
            except ValueError:
                print("Only one reference GCN could be chosen at a time.")
                continue
            select_parameters.tai_tGCN=tai_dict[tai_choice]
            break
        print("the GCN of tRNA for tai computing was selected\n")

    @staticmethod
    def parameter_select_ite():
        # select reference set for ite computing
        ite_dict = {1: 'Homo_sapiens_EMBOSS'}
        while True:
            try:
                ite_choice = int(input("select reference set for ite computing"
                                       "\nYour choice is: "
                                       "\n(1) 'Homo_sapiens_reference_fromEMBOSS[DEFAULT]'\n"))
            except ValueError:
                print("Only one reference set could be chosen at a time.")
                continue
            select_parameters.ite_heg= reference_heg_ite[ite_dict[ite_choice]]
            select_parameters.ite_bg = reference_bg_ite[ite_dict[ite_choice]]
            break


        print(f"reference set for ite computing was selected\n")

    @staticmethod
    def parameter_select_cbi():
        # select optimized codons for fop computing
        cbi_dict = {0: 'correlation_analysis'}
        while True:
            try:
                fop_choice = int(input("select optimized codons for cbi computing"
                                       "\nYour choice is: "
                                       "\n(0) Correlation_analysis_for_optimized_codon[DEFAULT]"
                                       "\n"))
            except ValueError:
                print("Only one reference could be chosen at a time.")
                continue
            select_parameters.cbi_opt_codon = cbi_dict[fop_choice]
            break
        print(f"optimized codon for cbi computing was selected\n")


    mydict = {1:parameter_select_cai, 2:parameter_select_fop, 3:parameter_select_tai, 4:parameter_select_ite,5:parameter_select_cbi}

    def __init__(self):
        while True:
            try:
                indexes = list(
                    map(int, input("Press the serial number of index of which parameter you want to change: "
                                   "\n(1) cai "
                                   "\n(2) fop "
                                   "\n(3) tai "
                                   "\n(4) ite "
                                   "\n(5) cbi"
                                   "\n").split()))
            except ValueError:
                print("Please input number")
                continue
            for index in indexes:
                if 0 < index and index < 6:
                    select_parameters.mydict[index]()
                else:
                    print("The number is not between 1 and 5!")
            break

    @staticmethod
    def generate_parameter_file():
        parameter_dataframe=pd.DataFrame(index=["TTT", "TTC", "TTA", "TTG",
              "TCT", "TCC", "TCA", "TCG",
              "TAT", "TAC", "TAA", "TAG",
              "TGT", "TGC", "TGA", "TGG",
              "CTT", "CTC", "CTA", "CTG",
              "CCT", "CCC", "CCA", "CCG",
              "CAT", "CAC", "CAA", "CAG",
              "CGT", "CGC", "CGA", "CGG",
              "ATT", "ATC", "ATA", "ATG",
              "ACT", "ACC", "ACA", "ACG",
              "AAT", "AAC", "AAA", "AAG",
              "AGT", "AGC", "AGA", "AGG",
              "GTT", "GTC", "GTA", "GTG",
              "GCT", "GCC", "GCA", "GCG",
              "GAT", "GAC", "GAA", "GAG",
              "GGT", "GGC", "GGA", "GGG"])

        parameter_dataframe['tai_tGCN'] = select_parameters.tai_tGCN
        cai_dataframe=pd.DataFrame(select_parameters.cai_reference_frequency,index=select_parameters.cai_reference_order,columns=['cai_ref'])
        ite_dataframe=pd.DataFrame(index=["TTT", "TTC", "TTA", "TTG",
              "TCT", "TCC", "TCA", "TCG",
              "TAT", "TAC",
              "TGT", "TGC", "TGG",
              "CTT", "CTC", "CTA", "CTG",
              "CCT", "CCC", "CCA", "CCG",
              "CAT", "CAC", "CAA", "CAG",
              "CGT", "CGC", "CGA", "CGG",
              "ATT", "ATC", "ATA", "ATG",
              "ACT", "ACC", "ACA", "ACG",
              "AAT", "AAC", "AAA", "AAG",
              "AGT", "AGC", "AGA", "AGG",
              "GTT", "GTC", "GTA", "GTG",
              "GCT", "GCC", "GCA", "GCG",
              "GAT", "GAC", "GAA", "GAG",
              "GGT", "GGC", "GGA", "GGG"])
        #todo 注意非标准密码子表
        ite_dataframe['ite_heg']=select_parameters.ite_heg
        ite_dataframe['ite_bg']=select_parameters.ite_bg
        parameter_dataframe=pd.concat([parameter_dataframe,cai_dataframe],axis=1)
        parameter_dataframe=pd.concat([parameter_dataframe,ite_dataframe],axis=1)

        if type(select_parameters.cbi_opt_codon) != bool:
            parameter_dataframe['cbi_opt']=select_parameters.cbi_opt_codon
        if type(select_parameters.fop_opt_codon) != bool:
            parameter_dataframe['fop_opt']=select_parameters.fop_opt_codon


        parameter_dataframe.to_excel('parameter_file.xlsx')

        pass







c=select_parameters()
c.generate_parameter_file()

